# Composite action that caches and installs CLI
name: Download Slack CLI
description: Install Slack CLI if needed and add to PATH
runs:
  using: composite
  steps:
    - name: Cache Slack CLI
      id: cache-cli
      uses: actions/cache@v4
      with:
        path: ~/.slack/bin
        key: slack-cli-${{ runner.os }}-${{ runner.arch }}-${{ env.SLACK_CLI_VERSION }}  

    - name: Add Slack CLI to PATH (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: echo "$HOME/.slack/bin" >> "$GITHUB_PATH"

    # - name: Add Slack CLI to PATH (Windows)
    #   if: runner.os == 'Windows'
    #   shell: pwsh
    #   run: Add-Content -Path $env:GITHUB_PATH -Value "$env:USERPROFILE\.slack\bin"

    - name: Install Slack CLI (Linux/macOS)
      if:
        steps.cache-cli.outputs.cache-hit != 'true' && (runner.os == 'Linux' || runner.os == 'macOS')
      shell: bash
      run:
        curl -fsSL https://downloads.slack-edge.com/slack-cli/install.sh | bash -s -- -v $SLACK_CLI_VERSION

    - name: Install Slack CLI (Windows)
      # steps.cache-cli.outputs.cache-hit != 'true' &&
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        irm https://downloads.slack-edge.com/slack-cli/install-windows.ps1 | iex

    - name: Install Slack CLI (Windows, forced exit)
      if: steps.cache-cli.outputs.cache-hit != 'true' && runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "üîß Setting execution policy..."
        Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process -Force

        Write-Host "üêç PowerShell Language Mode: $($ExecutionContext.SessionState.LanguageMode)"

        Write-Host "üì¶ Downloading install script..."
        iwr -Uri https://downloads.slack-edge.com/slack-cli/install-windows.ps1 -OutFile install.ps1

        Write-Host "üöÄ Running install script in background job..."
        $job = Start-Job -ScriptBlock { & .\install.ps1 }

        # Wait up to 60 seconds for install (tweak as needed)
        $timeout = 60
        $elapsed = 0
        while ($job.State -eq 'Running' -and $elapsed -lt $timeout) {
          Start-Sleep -Seconds 2
          $elapsed += 2
          Write-Host "‚è≥ Still installing... ($elapsed seconds)"
        }

        if ($job.State -eq 'Running') {
          Write-Host "‚ö†Ô∏è Install still running after $timeout seconds. Stopping job..."
          Stop-Job $job
          Remove-Job $job
        } else {
          Write-Host "‚úÖ Job finished in $elapsed seconds."
          Receive-Job $job
        }

        Write-Host "üõ£Ô∏è PATH after install:"
        Write-Host $env:PATH

        # ‚úÖ Prevent step from hanging
        exit 0


