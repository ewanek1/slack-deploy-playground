name: Slack CLI Runner Tests 

on:
  pull_request

jobs:
  test-all:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Run slack version
        id: version
        uses: ./.github/.actions/slack-cli-installer
        with:
          command: "version"
          cli_version: "latest"
        env:
          SLACK_SERVICE_TOKEN: ${{ secrets.SLACK_SERVICE_TOKEN }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Debug outputs
        run: |
          echo "stdout: '${{ steps.version.outputs.stdout }}'"
          echo "success: '${{ steps.version.outputs.success }}'"
          echo "command executed: '${{ steps.version.outputs.command_executed }}'"

      - name: Verify CLI version
        if: steps.version.outputs.success != 'true'
        run: |
            echo "CLI version command failure"
            echo "stdout: ${{ steps.version.outputs.stdout }}"
            exit 1

      - name: Empty command
        id: empty-command
        uses: ./.github/.actions/slack-cli-installer
        with:
          command: ""
          cli_version: "latest"
        env:
          SLACK_SERVICE_TOKEN: ${{ secrets.SLACK_SERVICE_TOKEN }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Command with whitespace
        id: command-with-whitespace
        uses: ./.github/.actions/slack-cli-installer
        with:
          command: "  version"
          cli_version: "latest"
        env:
          SLACK_SERVICE_TOKEN: ${{ secrets.SLACK_SERVICE_TOKEN }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Long command with flags 
        id: long-command
        uses: ./.github/.actions/slack-cli-installer
        with:
          command: 'doctor --help --experiment string'
          cli_version: "latest"
        env:
          SLACK_SERVICE_TOKEN: ${{ secrets.SLACK_SERVICE_TOKEN }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Special chars
        id: special-chars
        uses: ./.github/.actions/slack-cli-installer
        with:
          command: 'doctor --help --experiment "release version@2.0.0"'
          cli_version: "latest"
        env:
          SLACK_SERVICE_TOKEN: ${{ secrets.SLACK_SERVICE_TOKEN }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Ensure all inputs work
        if: steps.empty-command.outputs.success != 'true' || 
            steps.command-with-whitespace.outputs.success != 'true' || 
            steps.long-command.outputs.success != 'true' || 
            steps.special-chars.outputs.success != 'true'
        run: |
          echo "Test input validation failure"
          echo "Empty command: ${{ steps.empty-command.outputs.success }}"
          echo "Command with whitespace: ${{ steps.command-with-whitespace.outputs.success }}"
          echo "Long command: ${{ steps.long-command.outputs.success }}"
          echo "Special chars: ${{ steps.special-chars.outputs.success }}"
          exit 1

      - name: Run with verbose
        id: help
        uses: ./.github/.actions/slack-cli-installer
        with:
          command: "help --verbose"
          cli_version: "latest"
          verbose: "true"
        env:
          SLACK_SERVICE_TOKEN: ${{ secrets.SLACK_SERVICE_TOKEN }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Ensure verbose flag worked
        if: steps.help.outputs.success != 'true'
        run: |
          echo "Verbose flag failure"
          echo "success: '${{ steps.help.outputs.success }}'"
          echo "stdout: '${{ steps.help.outputs.stdout }}'"
          exit 1

      - name: First run (install if missing)
        id: no-cache
        uses: ./.github/.actions/slack-cli-installer
        with:
          command: "version"
          cli_version: "latest"
        env:
          SLACK_SERVICE_TOKEN: ${{ secrets.SLACK_SERVICE_TOKEN }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Second run (should use cache)
        id: cache-hit
        uses: ./.github/.actions/slack-cli-installer
        with:
          command: "version"
          cli_version: "latest"
        env:
          SLACK_SERVICE_TOKEN: ${{ secrets.SLACK_SERVICE_TOKEN }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Ensure cache worked
        if: github.run_attempt > 1 && steps.cache-hit.outputs.success != 'true'
        run: |
          echo "cache failure"
          exit 1

      - name: Run with invalid command
        id: invalid-command
        continue-on-error: true
        uses: ./.github/.actions/slack-cli-installer
        with:
          command: "invalid-command"
          cli_version: "latest"
        env:
          SLACK_SERVICE_TOKEN: ${{ secrets.SLACK_SERVICE_TOKEN }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Expect failure
        if: steps.invalid-command.outputs.success == 'true'
        run: |
          echo "Expected failure with invalid command"
          echo "stdout: '${{ steps.invalid-command.outputs.stdout }}'"
          echo "success: '${{ steps.invalid-command.outputs.success }}'"
          exit 1

      - name: Test specific version
        id: specific-version
        uses: ./.github/.actions/slack-cli-installer
        with:
          command: "version"
          cli_version: "3.5.0"
        env:
          SLACK_SERVICE_TOKEN: ${{ secrets.SLACK_SERVICE_TOKEN }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Ensure specific version 
        if: ${{ !contains(steps.specific-version.outputs.stdout, '3.5.0') }}
        run: |
          echo "Specific version failure"
          echo "Actual output: '${{ steps.specific-version.outputs.stdout }}'"
          exit 1

      - name: Run with empty tokens
        id: empty-tokens
        continue-on-error: true
        uses: ./.github/.actions/slack-cli-installer
        with:
          command: "version"
          cli_version: "latest"
          
      - name: Expect failure with empty tokens
        if: steps.empty-tokens.outputs.success == 'true'
        run: |
          echo "Expected failure with empty tokens"
          echo "stdout: '${{ steps.empty-tokens.outputs.stdout }}'"
          echo "success: '${{ steps.empty-tokens.outputs.success }}'"
          exit 1
    
    