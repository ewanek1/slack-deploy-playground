name: Slack CLI Installation and Command Runner 
description: Download and cache the Slack CLI and run the input command 

inputs:
  command:
    description: "Slack CLI command to run"
    required: true
  verbose:
    description: "Enable verbose output"
    required: false
    default: 'false'
  cli_version:
    description: "Slack CLI Version"
    required: false
    default: '3.6.0'
  app_id: 
    description: "App ID"
    required: false


outputs:
  success:
    description: "Whether the command ran successfully"
    value: ${{ steps.run-slack-cli-command.outputs.success }}

runs:
  using: composite
  steps:
    - name: Cache Slack CLI 
      id: cache-cli
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.os == 'Windows' && format('{0}/AppData/Local/slack-cli', env.USERPROFILE) || '~/.slack/bin' }}
        key: slack-cli-${{ runner.os }}-${{ runner.arch }}-${{ inputs.cli_version }}

    - name: Add Slack CLI to PATH (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: echo "$HOME/.slack/bin" >> "$GITHUB_PATH"

    - name: Add Slack CLI to PATH (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: Add-Content -Path $env:GITHUB_PATH -Value "$env:USERPROFILE\AppData\Local\slack-cli\bin"

    - name: Install Slack CLI (Linux/macOS)
      if:
        (runner.os == 'Linux' || runner.os == 'macOS') && 
        (steps.cache-cli.outputs.cache-hit != 'true')
      shell: bash
      run: |
        curl -fsSL https://downloads.slack-edge.com/slack-cli/install.sh | bash -s -- -v ${{ inputs.cli_version }} --skip-update

    - name: Copy Windows Install Script
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "=== COPY DEBUG ==="
        $scriptPath = Join-Path $env:GITHUB_WORKSPACE "windows-install-script.ps1"
        $destPath = "$env:RUNNER_TEMP\install.ps1"
        
        Copy-Item $scriptPath $destPath -Force
        Write-Host "Copy-Item completed"
        Write-Host "Destination exists after copy: $(Test-Path $destPath)"
        
        # Set this as an output so we can verify it persists
        echo "script_path=$destPath" >> $env:GITHUB_OUTPUT
        echo "script_exists=true" >> $env:GITHUB_OUTPUT


    - name: Install Slack CLI (Windows)
      if: runner.os == 'Windows' && (steps.cache-cli.outputs.cache-hit != 'true')
      shell: pwsh
      run: |
        Write-Host "--- INSTALL DEBUG ---"
        $scriptPath = "$env:RUNNER_TEMP\install.ps1"
        Write-Host "Script exists: $(Test-Path $scriptPath)"

        Write-Host "Running install script..."
        & $scriptPath -Alias "slack" -SkipGit $false -Verbose

        Write-Host "Script finished, exit code: $LASTEXITCODE"

    - name: Run Slack CLI Command
      id: run-slack-cli-command
      shell: bash
      env:
        SLACK_SERVICE_TOKEN: $SLACK_SERVICE_TOKEN
        SLACK_BOT_TOKEN: $SLACK_BOT_TOKEN
        VERBOSE: ${{ inputs.verbose }}
      run: |
        if [ "${{ inputs.verbose }}" == "true" ]; then
          echo "${{ inputs.command }} --verbose --skip-update --app ${{ inputs.app_id }}"
          slack ${{ inputs.command }} --verbose --skip-update --app ${{ inputs.app_id }}
        else
          echo "${{ inputs.command }} --skip-update --app ${{ inputs.app_id }}"
          slack ${{ inputs.command }} --skip-update --app ${{ inputs.app_id }}
        fi