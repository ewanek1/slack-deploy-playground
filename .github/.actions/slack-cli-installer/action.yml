name: Slack CLI Installation and Command Runner 
description: Download and cache the Slack CLI and run the input command 

inputs:
  command:
    description: "Slack CLI command to run"
    required: true
  verbose:
    description: "Enable verbose output"
    required: false
    default: 'false'
  cli_version:
    description: "Slack CLI Version"
    required: false
    default: '3.6.0'

outputs:
  success:
    description: "Whether the command ran successfully"
    value: ${{ steps.run-slack-cli-command.outputs.success }}

runs:
  using: composite
  steps:
    - name: Cache Slack CLI 
      id: cache-cli
      uses: actions/cache@v4
      with:
        path: ~/.slack/bin
        key: slack-cli-${{ runner.os }}-${{ runner.arch }}-${{ inputs.cli_version }}

    - name: Add Slack CLI to PATH (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: echo "$HOME/.slack/bin" >> "$GITHUB_PATH"

    - name: Add Slack CLI to PATH (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: Add-Content -Path $env:GITHUB_PATH -Value "$env:USERPROFILE\.slack\bin"

    - name: Install Slack CLI (Linux/macOS)
      if:
        (runner.os == 'Linux' || runner.os == 'macOS') && 
        (steps.cache-cli.outputs.cache-hit != 'true')
      shell: bash
      run: |
        curl -fsSL https://downloads.slack-edge.com/slack-cli/install.sh | bash -s -- -v ${{ inputs.cli_version }} --skip-update

    - name: Copy Windows Install Script
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "=== COPY DEBUG ==="
        $scriptPath = Join-Path $env:GITHUB_WORKSPACE "windows-install-script.ps1"
        $destPath = "$env:RUNNER_TEMP\install.ps1"
        
        Copy-Item $scriptPath $destPath -Force
        Write-Host "Copy-Item completed"
        Write-Host "Destination exists after copy: $(Test-Path $destPath)"
        
        # Set this as an output so we can verify it persists
        echo "script_path=$destPath" >> $env:GITHUB_OUTPUT
        echo "script_exists=true" >> $env:GITHUB_OUTPUT



    - name: Install Slack CLI (Windows)
      if: runner.os == 'Windows' && (steps.cache-cli.outputs.cache-hit != 'true')
      shell: pwsh
      run: |
        Write-Host "=== INSTALL DEBUG ==="
        $scriptPath = "$env:RUNNER_TEMP\install.ps1"
        Write-Host "Script exists: $(Test-Path $scriptPath)"

        # Use named parameters only
        Write-Host "Running install script..."
        & $scriptPath -SkipGit $false -Verbose

        Write-Host "Script completed with exit code: $LASTEXITCODE"

    - name: Test _fingerprint command
      shell: pwsh
      run: |
        $SLACK_CLI_NAME = "slack"
        try {
            $fp = & $SLACK_CLI_NAME _fingerprint
            Write-Host "Fingerprint output type: $($fp.GetType())"
            Write-Host "Fingerprint value: $fp"
        } catch {
            Write-Host "Error running _fingerprint: $_"
        }

      
    - name: Run Slack CLI Command
      id: run-slack-cli-command
      shell: pwsh
      env:
        SLACK_SERVICE_TOKEN: $SLACK_SERVICE_TOKEN
        SLACK_BOT_TOKEN: $SLACK_BOT_TOKEN
        VERBOSE: ${{ inputs.verbose }}
      run: |
        Write-Host "Running command: ${{ inputs.command }}"
        
        $slackExe = "C:\Users\runneradmin\AppData\Local\slack-cli\bin\slack.exe"
        Write-Host "Using Slack CLI at: $slackExe"
        
        # Convert 'version' to '--version' if needed
        $cmd = "${{ inputs.command }}"
        if ($cmd -eq "version") { $cmd = "--version" }

        # Build argument array
        $args = @()
        $args += $cmd
        if ("${{ inputs.verbose }}" -eq "true") { $args += "--verbose" }
        $args += "--skip-update"

        # Run the command, capturing both stdout and stderr
        $output = & $slackExe @args 2>&1
        $exitCode = $LASTEXITCODE

        # Print output line by line in GitHub logs
        Write-Host "Command output:"
        $output | ForEach-Object { Write-Host $_ }
        Write-Host "Exit code: $exitCode"

        # Set success output
        $success = if ($exitCode -eq 0) { "true" } else { "false" }
        Add-Content -Path $env:GITHUB_OUTPUT -Value "success=$success"
        Add-Content -Path $env:GITHUB_OUTPUT -Value "exit_code=$exitCode"

        # Capture full stdout for workflow output
        $eof = [Guid]::NewGuid().ToString()
        Add-Content -Path $env:GITHUB_OUTPUT -Value "stdout<<$eof"
        $output | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
        Add-Content -Path $env:GITHUB_OUTPUT -Value "$eof"
