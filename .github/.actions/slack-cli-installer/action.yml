name: Slack CLI Installation and Command Runner 
description: Download and cache the Slack CLI and run the input command 

inputs:
  command:
    description: "Slack CLI command to run"
    required: true
  verbose:
    description: "Enable verbose output"
    required: false
    default: 'false'
  cli_version:
    description: "Slack CLI Version"
    required: false
    default: '3.6.0'
  app_id: 
    description: "App ID"
    required: false
    type: string

outputs:
  success:
    description: "Whether the command ran successfully"
    value: ${{ steps.run-slack-cli-command.outputs.success }}

runs:
  using: composite
  steps:
    - name: Cache Slack CLI 
      id: cache-cli
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.os == 'Windows' && format('{0}/AppData/Local/slack-cli', env.USERPROFILE) || '~/.slack/bin' }}
        key: slack-cli-${{ runner.os }}-${{ runner.arch }}-${{ inputs.cli_version }}

    - name: Add Slack CLI to PATH (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: echo "$HOME/.slack/bin" >> "$GITHUB_PATH"

    - name: Add Slack CLI to PATH (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: Add-Content -Path $env:GITHUB_PATH -Value "$env:USERPROFILE\AppData\Local\slack-cli\bin"

    - name: Install Slack CLI (Linux/macOS)
      if:
        (runner.os == 'Linux' || runner.os == 'macOS') && 
        (steps.cache-cli.outputs.cache-hit != 'true')
      shell: bash
      run: |
        curl -fsSL https://downloads.slack-edge.com/slack-cli/install.sh | bash -s -- -v ${{ inputs.cli_version }} --skip-update

    - name: Install Slack CLI (Windows)
      if: runner.os == 'Windows' && (steps.cache-cli.outputs.cache-hit != 'true')
      shell: pwsh
      run: |
        Write-Host "Installing Slack CLI version: ${{ inputs.cli_version }}"
        
        try {
          # Install with version parameter
          if ("${{ inputs.cli_version }}" -eq "latest") {
            irm https://downloads.slack-edge.com/slack-cli/install-windows-dev.ps1 | iex
          } else {
            irm https://downloads.slack-edge.com/slack-cli/install-windows-dev.ps1 | iex -- -v ${{ inputs.cli_version }}
          }
          
          # Verify installation
          $slackExe = "C:\Users\runneradmin\AppData\Local\slack-cli\bin\slack.exe"
          if (Test-Path $slackExe) {
            Write-Host "Slack CLI installed successfully at: $slackExe"
            
            # Test basic functionality
            $version = & $slackExe --version 2>&1
            Write-Host "Slack CLI version: $version"
          } else {
            Write-Error "Slack CLI executable not found at expected location"
            exit 1
          }
        }
        catch {
          Write-Error "Failed to install Slack CLI: $_"
          exit 1
        }
        


    - name: Run Slack CLI Command
      id: run-slack-cli-command
      shell: pwsh
      env:
        SLACK_SERVICE_TOKEN: $SLACK_SERVICE_TOKEN
        SLACK_BOT_TOKEN: $SLACK_BOT_TOKEN
        VERBOSE: ${{ inputs.verbose }}
      run: |
        Write-Host "Running command: ${{ inputs.command }}"
        
        $slackExe = "C:\Users\runneradmin\AppData\Local\slack-cli\bin\slack.exe"
        Write-Host "Using Slack CLI at: $slackExe"
        
        # Build argument array
        $args = @()
        $args += "${{ inputs.command }}"  # Use original command
        if ("${{ inputs.verbose }}" -eq "true") { $args += "--verbose" }
        if ("${{ inputs.app_id }}" -ne "") { $args += "--app"; $args += "${{ inputs.app_id }}" }
        $args += "--skip-update"

        # Run the command, capturing both stdout and stderr
        $output = & $slackExe @args 2>&1
        $exitCode = $LASTEXITCODE

        # Print output line by line in GitHub logs
        Write-Host "Command output:"
        $output | ForEach-Object { Write-Host $_ }
        Write-Host "Exit code: $exitCode"

        # Set all required outputs
        $success = if ($exitCode -eq 0) { "true" } else { "false" }
        Add-Content -Path $env:GITHUB_OUTPUT -Value "success=$success"
        Add-Content -Path $env:GITHUB_OUTPUT -Value "command_executed=slack $($args -join ' ')"
        
        # Capture stdout using proper GitHub Actions syntax
        Add-Content -Path $env:GITHUB_OUTPUT -Value "stdout<<EOF"
        $output | ForEach-Object { Add-Content -Path $env:GITHUB_OUTPUT -Value $_ }
        Add-Content -Path $env:GITHUB_OUTPUT -Value "EOF"
